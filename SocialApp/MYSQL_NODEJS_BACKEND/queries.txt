create table users (
    user_id int primary key auto_increment,
    username varchar(200) not null default 'EMPTY',
    password varchar(255) not null,
    image text default 'https://cdn.dribbble.com/users/171004/screenshots/14304355/media/c97f69f5044e73bfd831212ef0cad7fe.png',
    description text not null default 'EMPTY'
);

192.168.0.6

create table friend (
    user_id int not null,
    friend_id int not null,
    FOREIGN KEY(user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY(friend_id) REFERENCES users(user_id) ON DELETE CASCADE
);

create table requests (
    from_id int not null,
    to_id int not null,
    FOREIGN KEY(from_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY(to_id) REFERENCES users(user_id) ON DELETE CASCADE
);

create table posts (
    post_id int not null primary key auto_increment,
    user_id int not null,
    title text not null default 'TITLE',
    description text not null default 'DESCRIPTION',
    image text not null default 'https://cdn.dribbble.com/users/6099628/screenshots/14468614/media/5942f01b1839b2333692960ff04f65b1.png',
    created_at timestamp not null default NOW(),
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

create table notifications (
    notif_id int not null primary key auto_increment,
    user_id int not null,
    type int not null default -1,
    data int not null,
    FOREIGN KEY(user_id) REFERENCES users(user_id) ON DELETE CASCADE
);

alter table notifications add status int not null default 0;


SELECT posts.user_id,posts.post_id,posts.title,posts.image,posts.description,posts.created_at,users.username FROM posts INNER JOIN friend ON posts.user_id = friend.friend_id INNER JOIN users ON friend.friend_id = users.user_id WHERE friend.user_id = 7 OR posts.user_id = 7;
create table likes (
    like_id int not null primary key auto_increment,
    user_id int not null,
    post_id int not null,
    FOREIGN KEY(user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (post_id) REFERENCES posts(post_id) ON DELETE CASCADE
);

create table comments (
    comment_id int not null primary key AUTO_INCREMENT,
    comment text not null default 'COMMENT',
    user_id int not null,
    post_id int not null,
    FOREIGN KEY (user_id) REFERENCES users(user_id) ON DELETE CASCADE,
    FOREIGN KEY (post_id) REFERENCES posts(post_id) ON DELETE CASCADE
);

alter table comments add created_at timestamp not null default NOW();

alter table notifications add created_at timestamp not null default NOW();

create trigger delete_notif before delete on likes for each row begin
	DELETE FROM notifications WHERE data = CURRENT.like_id ;
END